Ist Way to solve this but creating too many copies of previous array.


import java.util.*;
public class Main {
public static boolean isSorted(int a[])	{
	if(a.length == 1)	{ //Base	Case
	return true;
	}
	
	if (a[0] > a[1]) {
	    return false;
	}
	
	int smallArray[] = new int[a.length - 1];                        //Recursive	call
	for (int i = 1; i < a.length; i++) {
	    smallArray[i - 1] = a[i];              //Recursive	call
	}                       
	
	boolean isSmallArraySorted = isSorted(smallArray);   //Small	Calculation and	return	statement
	return isSmallArraySorted;
}
	
	public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < a.length; i++) {
            a[i] = scn.nextInt();
        }
        System.out.println(isSorted(a));
    
	}
}




2nd way
import java.util.*;
public class Main {
public static boolean isSortedBetter(int a[], int si) {
	if(si == a.length -1) {                            //Base	Case
	return true;
	}
	
	if (a[si] > a[si + 1]) {
	    return false;
	}
	
	boolean isSmallArraySorted = isSortedBetter(a, si + 1);       // Recursive call
	return isSmallArraySorted;
}
	
	public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < a.length; i++) {
            a[i] = scn.nextInt();
        }
	
	int si = 0;
        System.out.println(isSortedBetter(a, si));
    
	}
}



